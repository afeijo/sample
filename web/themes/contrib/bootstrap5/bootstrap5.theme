<?php

/**
 * @file
 * bootstrap5 theme file.
 */

use Drupal\block\Entity\Block;
use Drupal\bootstrap5\SettingsManager;
use Drupal\bootstrap5\SubthemeManager;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bootstrap5_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if (isset($_GET['styleguide'])) {
    $suggestions[] = 'page__styleguide';
  }

  if (isset($variables['attributes']['data-block']['region'])) {
    $region = $variables['attributes']['data-block']['region'];
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
    $suggestions[] = 'menu__' . $region;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bootstrap5_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  $settings_manager = new SettingsManager(\Drupal::service('theme.manager'));
  return $settings_manager->themeSettingsAlter($form, $form_state, $form_id);
}

/**
 * Validate callback to ensure filter order and allowed_html are compatible.
 */
function bootstrap5_form_system_theme_settings_subtheme_validate(array &$form, FormStateInterface $form_state) {
  $subtheme_manager = new SubthemeManager(\Drupal::service('file_system'), \Drupal::service('messenger'));
  return $subtheme_manager->validateForm($form, $form_state);
}

/**
 * Form submission handler for node_form().
 *
 * @see bootstrap5_form_system_theme_settings_alter()
 */
function bootstrap5_form_system_theme_settings_subtheme_submit($form, FormStateInterface $form_state) {
  $subtheme_manager = new SubthemeManager(\Drupal::service('file_system'), \Drupal::service('messenger'));
  return $subtheme_manager->submitForm($form, $form_state);
}

/**
 * Implements theme_preprocess_html().
 */
function bootstrap5_preprocess_html(&$variables) {
  // Body colour theme.
  $variables['b5_body_schema'] = theme_get_setting('b5_body_schema');
  $variables['b5_body_bg_schema'] = theme_get_setting('b5_body_bg_schema');
}

/**
 * Implements theme_preprocess_page().
 */
function bootstrap5_preprocess_page(&$variables) {
  // Pass variables to theme.
  $variables['b5_top_container'] = theme_get_setting('b5_top_container');
  // Navbar colour theme.
  $variables['b5_navbar_schema'] = theme_get_setting('b5_navbar_schema');
  $variables['b5_navbar_bg_schema'] = theme_get_setting('b5_navbar_bg_schema');
  // Footer colour theme.
  $variables['b5_footer_schema'] = theme_get_setting('b5_footer_schema');
  $variables['b5_footer_bg_schema'] = theme_get_setting('b5_footer_bg_schema');

}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function bootstrap5_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = [
      'library' => [
        'bootstrap5/drupal.nav-tabs',
      ],
    ];
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = [
      'library' => [
        'bootstrap5/drupal.nav-tabs',
      ],
    ];
  }

  foreach (Element::children($variables['primary']) as $key) {
    $variables['primary'][$key]['#level'] = 'primary';
  }
  foreach (Element::children($variables['secondary']) as $key) {
    $variables['secondary'][$key]['#level'] = 'secondary';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function bootstrap5_preprocess_menu_local_task(&$variables) {
  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link active is-active';
  }
  else {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}

/**
 * Implements theme_preprocess_textarea().
 */
function bootstrap5_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'form-control';
}

/**
 * Implements template_preprocess_HOOK() for input.
 */
function bootstrap5_preprocess_input(&$variables) {

  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'url',
    'month',
    'week',
  ];

  if (in_array($type_html, $text_types_html)) {
    $variables['attributes']['class'][] = 'form-control';
  }

  if (in_array($type_html, ['checkbox'])) {
    $variables['attributes']['class'][] = 'form-check-input';
  }
}

/**
 * Implements theme_preprocess_datetime_form().
 */
function bootstrap5_preprocess_datetime_form(&$variables) {
  $variables['attributes']['class'][] = 'form-inline';
}

/**
 * Implements theme_preprocess_views_ui_display_tab_setting().
 */
function bootstrap5_preprocess_views_ui_display_tab_setting(&$variables) {
  $variables['attributes']['class'][] = 'my-1';
}

/**
 * Implements theme_preprocess_views_ui_display_tab_bucket().
 */
function bootstrap5_preprocess_views_ui_display_tab_bucket(&$variables) {
  $variables['attributes']['class'][] = 'my-2';
}

/**
 * Implements theme_preprocess_image().
 */
function bootstrap5_preprocess_image(&$variables) {
  if (!empty($variables['attributes']['class']) && is_string($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [$variables['attributes']['class']];
  }
  $variables['attributes']['class'][] = 'img-fluid';
}

/**
 * Callback to add standard table classes.
 *
 * @see https://getbootstrap.com/docs/5.2/content/tables/
 */
function bootstrap5_add_table_variables(&$variables) {
  $variables['attributes']['class'][] = 'table';
}

/**
 * Callback to add standard table classes.
 *
 * @see https://getbootstrap.com/docs/5.2/content/tables/
 */
function bootstrap5_add_table_striped_variables(&$variables) {
  $variables['attributes']['class'][] = 'table-striped';
}

/**
 * Implements theme_preprocess_system_modules_details().
 */
function bootstrap5_preprocess_system_modules_details(&$variables) {
  bootstrap5_add_table_variables($variables);
  bootstrap5_add_table_striped_variables($variables);
}

/**
 * Implements theme_preprocess_system_modules_uninstall().
 */
function bootstrap5_preprocess_system_modules_uninstall(&$variables) {
  bootstrap5_add_table_variables($variables);
  bootstrap5_add_table_striped_variables($variables);
}

/**
 * Implements theme_preprocess_views_ui_views_listing_table().
 */
function bootstrap5_preprocess_views_ui_views_listing_table(&$variables) {
  bootstrap5_add_table_variables($variables);
  bootstrap5_add_table_striped_variables($variables);
}

/**
 * Implements theme_preprocess_table().
 */
function bootstrap5_preprocess_table(&$variables) {
  bootstrap5_add_table_variables($variables);
}

/**
 * Implements hook_views_pre_render().
 */
function bootstrap5_views_pre_render(ViewExecutable $view) {
  $add_classes = function (&$option, array $classes_to_add) {
    $classes = preg_split('/\s+/', $option);
    $classes = array_filter($classes);
    $classes = array_merge($classes, $classes_to_add);
    $option = implode(' ', array_unique($classes));
  };

  if ($view->id() === 'media_library') {
    if ($view->display_handler->options['defaults']['css_class']) {
      $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view']);
    } else {
      $add_classes($view->display_handler->options['css_class'], ['media-library-view']);
    }

    if ($view->current_display === 'page') {
      if (array_key_exists('media_bulk_form', $view->field)) {
        $add_classes($view->field['media_bulk_form']->options['element_class'], ['media-library-item__click-to-select-checkbox']);
      }
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('edit_media', $view->field)) {
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['media-library-item__edit']);
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['icon-link']);
      }
      if (array_key_exists('delete_media', $view->field)) {
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['media-library-item__remove']);
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['icon-link']);
      }
    } elseif (strpos($view->current_display, 'widget') === 0) {
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('media_library_select_form', $view->field)) {
        $add_classes($view->field['media_library_select_form']->options['element_wrapper_class'], ['media-library-item__click-to-select-checkbox']);
      }

      if ($view->display_handler->options['defaults']['css_class']) {
        $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view--widget']);
      } else {
        $add_classes($view->display_handler->options['css_class'], ['media-library-view--widget']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_media_library_item__widget().
 *
 * This targets each media item selected in an entity reference field.
 */
function bootstrap5_preprocess_media_library_item__widget(array &$variables) {
  $variables['content']['remove_button']['#attributes']['class'][] = 'media-library-item__remove';
  $variables['content']['remove_button']['#attributes']['class'][] = 'icon-link';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass block region value to content so this can be used in
 * THEME_theme_suggestions_menu_alter.
 */
function bootstrap5_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($block) {
      $region = Block::load($variables['elements']['#id'])->getRegion();
      if (!empty($region)) {
        $variables['content']['#attributes']['data-block']['region'] = $region;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bootstrap5_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['data-block']['region'])) {
    $region = $variables['attributes']['data-block']['region'];
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
    $suggestions[] = 'menu__' . $region;
  }
}
